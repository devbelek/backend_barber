#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–ó–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: python test_telegram_notifications.py
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'barberhub.settings')
django.setup()

from django.contrib.auth.models import User
from notifications.models import TelegramUser, Notification
from notifications.bot import send_telegram_message, send_test_message, send_booking_notification
from bookings.models import Booking
from services.models import Service
import datetime
from django.utils import timezone


def test_telegram_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram Bot API"""
    print("=" * 50)
    print("1. –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö TELEGRAM BOT API")
    print("=" * 50)

    from django.conf import settings
    token = settings.TELEGRAM_BOT_TOKEN

    if not token:
        print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings.py")
        return False

    print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {token[:10]}...{token[-10:]}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    import requests
    try:
        response = requests.get(f"https://api.telegram.org/bot{token}/getMe")
        if response.status_code == 200:
            bot_info = response.json()['result']
            print(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{bot_info['username']} ({bot_info['first_name']})")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def check_telegram_users():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\n" + "=" * 50)
    print("2. –ü–†–û–í–ï–†–ö–ê –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–• TELEGRAM –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("=" * 50)

    telegram_users = TelegramUser.objects.all()

    if not telegram_users.exists():
        print("‚ö†Ô∏è  –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return []

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {telegram_users.count()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for tg_user in telegram_users:
        print(f"   - –ë–∞—Ä–±–µ—Ä: {tg_user.barber.get_full_name()} | Telegram: @{tg_user.username}")
        if tg_user.chat_id:
            print(f"     Chat ID: {tg_user.chat_id}")
        else:
            print(f"     ‚ö†Ô∏è  Chat ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    return list(telegram_users)


def test_send_message(telegram_users):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\n" + "=" * 50)
    print("3. –¢–ï–°–¢ –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–ô")
    print("=" * 50)

    if not telegram_users:
        print("‚ö†Ô∏è  –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞")
        return

    # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
    tg_user = telegram_users[0]
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è @{tg_user.username}...")

    success = send_test_message(
        username=tg_user.username,
        title="–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ –≤—ã –µ–≥–æ –≤–∏–¥–∏—Ç–µ - —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç! üéâ"
    )

    if success:
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –ø–æ chat_id
        if tg_user.chat_id:
            print(f"–ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ chat_id: {tg_user.chat_id}")
            success = send_telegram_message(
                tg_user.chat_id,
                "*–¢–µ—Å—Ç –ø–æ Chat ID*\n\n–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É—é –ø–æ chat_id"
            )
            if success:
                print("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ chat_id —É—Å–ø–µ—à–Ω–∞!")
            else:
                print("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ chat_id –Ω–µ —É–¥–∞–ª–∞—Å—å")


def test_booking_notification():
    """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    print("\n" + "=" * 50)
    print("4. –¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ò")
    print("=" * 50)

    # –ù–∞—Ö–æ–¥–∏–º –±–∞—Ä–±–µ—Ä–∞ —Å Telegram
    barber = User.objects.filter(
        profile__user_type='barber',
        telegram_account__isnull=False
    ).first()

    if not barber:
        print("‚ö†Ô∏è  –ù–µ—Ç –±–∞—Ä–±–µ—Ä–æ–≤ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º Telegram")
        return

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –±–∞—Ä–±–µ—Ä: {barber.get_full_name()} (@{barber.telegram_account.username})")

    # –ù–∞—Ö–æ–¥–∏–º —É—Å–ª—É–≥—É —ç—Ç–æ–≥–æ –±–∞—Ä–±–µ—Ä–∞
    service = Service.objects.filter(barber=barber).first()
    if not service:
        print("‚ö†Ô∏è  –£ –±–∞—Ä–±–µ—Ä–∞ –Ω–µ—Ç —É—Å–ª—É–≥")
        return

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —É—Å–ª—É–≥–∞: {service.title}")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    tomorrow = timezone.now().date() + datetime.timedelta(days=1)

    booking_data = {
        'client_name': '–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç',
        'client_phone': '+996 555 123456',
        'service_title': service.title,
        'date': tomorrow.strftime('%d.%m.%Y'),
        'time': '14:00',
        'notes': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
    }

    print("\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏...")
    success = send_booking_notification(barber.id, booking_data)

    if success:
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")


def check_notifications_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ë–î"""
    print("\n" + "=" * 50)
    print("5. –°–¢–ê–¢–£–° –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 50)

    total = Notification.objects.count()
    pending = Notification.objects.filter(status='pending').count()
    sent = Notification.objects.filter(status='sent').count()
    failed = Notification.objects.filter(status='failed').count()

    print(f"–í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {total}")
    print(f"  - –û–∂–∏–¥–∞—é—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {pending}")
    print(f"  - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}")
    print(f"  - –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {failed}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    recent = Notification.objects.order_by('-created_at')[:5]
    if recent:
        print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        for notif in recent:
            print(
                f"  - {notif.created_at.strftime('%d.%m %H:%M')} | {notif.recipient.username} | {notif.type} | {notif.status}")


def check_signal_registration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\n" + "=" * 50)
    print("6. –ü–†–û–í–ï–†–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –°–ò–ì–ù–ê–õ–û–í")
    print("=" * 50)

    from django.db.models import signals
    from bookings.models import Booking

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è post_save —Å–∏–≥–Ω–∞–ª–∞ Booking
    handlers = signals.post_save._live_receivers(sender=Booking)

    if handlers:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è Booking.post_save")
        for handler in handlers:
            print(f"   - {handler}")
    else:
        print("‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ô" + "\n")

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not test_telegram_connection():
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram Bot API")
        return

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    telegram_users = check_telegram_users()

    # 3. –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if telegram_users:
        test_send_message(telegram_users)

    # 4. –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    test_booking_notification()

    # 5. –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    check_notifications_status()

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    check_signal_registration()

    print("\n" + "=" * 50)
    print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 50)

    print("\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç @barber_tarak_bot –∞–∫—Ç–∏–≤–µ–Ω")
    print("2. –ë–∞—Ä–±–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å /start –±–æ—Ç—É –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ TELEGRAM_BOT_TOKEN –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤ .env —Ñ–∞–π–ª–µ")
    print("4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∏–≥–Ω–∞–ª—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ apps.py")


if __name__ == "__main__":
    main()