import logging
import requests
import os
from django.conf import settings
from typing import Dict, Optional

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    try:
        TOKEN = settings.TELEGRAM_BOT_TOKEN
    except AttributeError:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        TOKEN = None


def send_telegram_message(chat_id: str, message: str) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    """
    if not TOKEN:
        logger.error("Telegram bot —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False

    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'Markdown'
        }

        response = requests.post(url, data=data, timeout=10)

        if response.status_code == 200:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code} - {response.text}")
            return False

    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        return False


def send_booking_notification(barber_id: int, booking_data: dict) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    """
    try:
        from notifications.models import TelegramUser

        # –ù–∞—Ö–æ–¥–∏–º Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_user = TelegramUser.objects.get(barber_id=barber_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        client_name = booking_data.get('client_name', '–ö–ª–∏–µ–Ω—Ç')
        client_phone = booking_data.get('client_phone', '')
        service_title = booking_data.get('service_title', '–£—Å–ª—É–≥–∞')
        date = booking_data.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        time = booking_data.get('time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        notes = booking_data.get('notes', '')

        message = (
            f"üîî *–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!*\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
        )

        if client_phone:
            message += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {client_phone}\n"

        message += (
            f"‚úÇÔ∏è –£—Å–ª—É–≥–∞: {service_title}\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"üïí –í—Ä–µ–º—è: {time}\n"
        )

        if notes:
            message += f"\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {notes}\n"

        message += f"\n‚úÖ –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç."

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id
        chat_id = telegram_user.chat_id or f"@{telegram_user.username}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = send_telegram_message(chat_id, message)

        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            from django.utils import timezone
            telegram_user.last_notification = timezone.now()
            telegram_user.save()

        return success

    except TelegramUser.DoesNotExist:
        logger.warning(f"Telegram username –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±–∞—Ä–±–µ—Ä–∞ ID {barber_id}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–∞—Ä–±–µ—Ä—É {barber_id}: {str(e)}")
        return False


def send_test_message(username: str, title: str, message: str) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        from notifications.models import TelegramUser

        telegram_user = TelegramUser.objects.get(username=username)
        formatted_message = f"*{title}*\n\n{message}"
        chat_id = telegram_user.chat_id or f"@{username}"

        success = send_telegram_message(chat_id, formatted_message)

        if success:
            from django.utils import timezone
            telegram_user.last_notification = timezone.now()
            telegram_user.save()

        return success

    except TelegramUser.DoesNotExist:
        logger.error(f"TelegramUser —Å username {username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        return False