import asyncio
import logging
from typing import Dict, Optional
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
import os
from django.conf import settings
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = "7993091176:AAFcjI0NrUl-Sdz_XLAxbVjHzfzdhVAhdOw"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    user = update.effective_user
    if not user:
        return

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö –≤ BarberHub.\n\n"
        f"–í–∞—à username –≤ Telegram: @{user.username}\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –±–∞—Ä–±–µ—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö."
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help."""
    help_text = (
        "ü§ñ *–ë–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π BarberHub*\n\n"
        "–Ø –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö –Ω–∞ –≤–∞—à–∏ —É—Å–ª—É–≥–∏.\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    if not user or not user.username:
        await update.message.reply_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.")
        return

    username = user.username.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    from notifications.models import TelegramUser
    try:
        telegram_user = TelegramUser.objects.get(username=username)
        barber_name = f"{telegram_user.barber.first_name} {telegram_user.barber.last_name}"

        # –û–±–Ω–æ–≤–ª—è–µ–º chat_id, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if not telegram_user.chat_id:
            telegram_user.chat_id = update.effective_chat.id
            telegram_user.save()

        await update.message.reply_text(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!\n\n"
            f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: {barber_name}\n"
            f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö –Ω–∞ –≤–∞—à–∏ —É—Å–ª—É–≥–∏."
        )
    except TelegramUser.DoesNotExist:
        await update.message.reply_text(
            f"‚ö†Ô∏è –í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç (@{username}) –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º –±–∞—Ä–±–µ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    await update.message.reply_text(
        "–Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )


def setup_application():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞."""
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    return application


async def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = setup_application()
    await application.initialize()
    await application.start()
    await application.updater.start_polling()

    # –û–∂–∏–¥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
    await asyncio.Event().wait()


async def send_booking_notification(barber_id: int, booking_data: dict) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞—Ä–±–µ—Ä—É.

    Args:
        barber_id (int): ID –±–∞—Ä–±–µ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
        booking_data (dict): –î–∞–Ω–Ω—ã–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏

    Returns:
        bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from notifications.models import TelegramUser
        try:
            telegram_user = TelegramUser.objects.get(barber_id=barber_id)
            username = telegram_user.username
            chat_id = telegram_user.chat_id

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            client_name = booking_data.get('client_name', '–ö–ª–∏–µ–Ω—Ç')
            service_title = booking_data.get('service_title', '–£—Å–ª—É–≥–∞')
            date = booking_data.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            time = booking_data.get('time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
            notes = booking_data.get('notes', '')

            message = (
                f"üîî *–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!*\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
                f"‚úÇÔ∏è –£—Å–ª—É–≥–∞: {service_title}\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"üïí –í—Ä–µ–º—è: {time}\n"
            )

            if notes:
                message += f"\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {notes}\n"

            message += f"\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if chat_id:
                # –ï—Å–ª–∏ –µ—Å—Ç—å chat_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç
                await bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown')
            else:
                # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ username
                await bot.send_message(chat_id=f"@{username}", text=message, parse_mode='Markdown')

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            telegram_user.last_notification = datetime.now()
            telegram_user.save()

            return True

        except TelegramUser.DoesNotExist:
            logger.warning(f"Telegram username not found for barber ID {barber_id}")
            return False

        except Exception as e:
            logger.error(f"Error sending notification to barber {barber_id}: {str(e)}")
            return False

    except Exception as e:
        logger.error(f"Error in send_booking_notification: {str(e)}")
        return False


def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    try:
        asyncio.run(run_bot())
    except Exception as e:
        logger.error(f"Error running telegram bot: {str(e)}")