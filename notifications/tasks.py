import asyncio
import logging
from datetime import datetime
from django.utils import timezone
from celery import shared_task
from .models import Notification, TelegramUser
from .bot import bot, send_booking_notification  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞

logger = logging.getLogger(__name__)


# –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
@shared_task
def send_telegram_notification_task(barber_id, booking_data):
    """
    Celery –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ Telegram.

    Args:
        barber_id (int): ID –±–∞—Ä–±–µ—Ä–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
        booking_data (dict): –î–∞–Ω–Ω—ã–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏

    Returns:
        bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from notifications.models import TelegramUser
        try:
            telegram_user = TelegramUser.objects.get(barber_id=barber_id)
            username = telegram_user.username
            chat_id = telegram_user.chat_id

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            client_name = booking_data.get('client_name', '–ö–ª–∏–µ–Ω—Ç')
            service_title = booking_data.get('service_title', '–£—Å–ª—É–≥–∞')
            date = booking_data.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            time = booking_data.get('time', '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
            notes = booking_data.get('notes', '')

            message = (
                f"üîî *–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!*\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
                f"‚úÇÔ∏è –£—Å–ª—É–≥–∞: {service_title}\n"
                f"üìÖ –î–∞—Ç–∞: {date}\n"
                f"üïí –í—Ä–µ–º—è: {time}\n"
            )

            if notes:
                message += f"\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {notes}\n"

            message += f"\n–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if chat_id:
                future = loop.create_task(bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown'))
            else:
                future = loop.create_task(bot.send_message(chat_id=f"@{username}", text=message, parse_mode='Markdown'))

            loop.run_until_complete(future)
            loop.close()

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            telegram_user.last_notification = datetime.now()
            telegram_user.save()

            return True

        except TelegramUser.DoesNotExist:
            logger.warning(f"Telegram username not found for barber ID {barber_id}")
            return False

        except Exception as e:
            logger.error(f"Error sending notification to barber {barber_id}: {str(e)}")
            return False

    except Exception as e:
        logger.error(f"Error in send_telegram_notification_task: {str(e)}")
        return False


@shared_task
def send_telegram_notification(username, title, message, notification_id=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.

    Args:
        username (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        notification_id (int, optional): ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        formatted_message = f"*{title}*\n\n{message}"

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        future = loop.create_task(
            bot.send_message(
                chat_id=f"@{username}",
                text=formatted_message,
                parse_mode='Markdown'
            )
        )
        loop.run_until_complete(future)
        loop.close()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID
        if notification_id:
            notification = Notification.objects.get(id=notification_id)
            notification.status = 'sent'
            notification.sent_at = timezone.now()
            notification.save()

            # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            telegram_user = TelegramUser.objects.get(username=username)
            telegram_user.last_notification = timezone.now()
            telegram_user.save()

        logger.info(f"Telegram notification successfully sent to @{username}")
        return True

    except Exception as e:
        logger.error(f"Error sending Telegram notification to @{username}: {str(e)}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID
        if notification_id:
            try:
                notification = Notification.objects.get(id=notification_id)
                notification.status = 'failed'
                notification.save()
            except Exception as db_error:
                logger.error(f"Error updating notification status: {str(db_error)}")

        return False


@shared_task
def process_pending_notifications():
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    pending_notifications = Notification.objects.filter(status='pending')

    for notification in pending_notifications:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram
            if hasattr(notification.recipient,
                       'telegram_account') and notification.recipient.telegram_account.is_active:
                telegram_user = notification.recipient.telegram_account

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                send_telegram_notification.delay(
                    username=telegram_user.username,
                    title=notification.title,
                    message=notification.content,
                    notification_id=notification.id
                )
            else:
                # –ï—Å–ª–∏ Telegram –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                # (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –¥—Ä—É–≥–∏–º –∫–∞–Ω–∞–ª–∞–º)
                notification.status = 'sent'
                notification.sent_at = timezone.now()
                notification.save()

        except Exception as e:
            logger.error(f"Error processing notification {notification.id}: {str(e)}")


@shared_task
def send_booking_reminders():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö.
    """
    from bookings.models import Booking
    from datetime import date, timedelta

    # –ù–∞—Ö–æ–¥–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    tomorrow = date.today() + timedelta(days=1)
    bookings = Booking.objects.filter(date=tomorrow, status='confirmed')

    for booking in bookings:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            if hasattr(booking.client, 'telegram_account') and booking.client.telegram_account.is_active:
                # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                notification = Notification.objects.create(
                    recipient=booking.client,
                    type='booking_reminder',
                    title=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏",
                    content=f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m.%Y')}) –≤ {booking.time.strftime('%H:%M')} "
                            f"—É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ª—É–≥–∞ \"{booking.service.title}\".",
                    related_object_id=booking.id,
                    related_object_type='booking',
                    status='pending'
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram
                send_telegram_notification.delay(
                    username=booking.client.telegram_account.username,
                    title="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏",
                    message=f"–ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m.%Y')}) –≤ {booking.time.strftime('%H:%M')} "
                            f"—É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ª—É–≥–∞ \"{booking.service.title}\".",
                    notification_id=notification.id
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–∞—Ä–±–µ—Ä—É
            if hasattr(booking.service.barber,
                       'telegram_account') and booking.service.barber.telegram_account.is_active:
                # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                notification = Notification.objects.create(
                    recipient=booking.service.barber,
                    type='booking_reminder',
                    title=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏",
                    content=f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m.%Y')}) –≤ {booking.time.strftime('%H:%M')} "
                            f"—É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ª—É–≥–∞ \"{booking.service.title}\" –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {booking.client.get_full_name() or booking.client.username}.",
                    related_object_id=booking.id,
                    related_object_type='booking',
                    status='pending'
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram
                send_telegram_notification.delay(
                    username=booking.service.barber.telegram_account.username,
                    title="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–ª–∏–µ–Ω—Ç–µ",
                    message=f"–ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m.%Y')}) –≤ {booking.time.strftime('%H:%M')} "
                            f"—É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ª—É–≥–∞ \"{booking.service.title}\" –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {booking.client.get_full_name() or booking.client.username}.",
                    notification_id=notification.id
                )

        except Exception as e:
            logger.error(f"Error sending reminder for booking {booking.id}: {str(e)}")