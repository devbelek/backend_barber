import logging
import os
from django.core.management.base import BaseCommand
from notifications.bot import get_bot_info, TOKEN, send_message_sync
from notifications.models import TelegramUser

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–æ–º'

    def add_arguments(self, parser):
        parser.add_argument(
            '--info',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ',
        )
        parser.add_argument(
            '--test-chat',
            type=str,
            help='–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç (chat_id –∏–ª–∏ @username)',
        )
        parser.add_argument(
            '--test-barbers',
            action='store_true',
            help='–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –±–∞—Ä–±–µ—Ä–∞–º',
        )
        parser.add_argument(
            '--list-barbers',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∞—Ä–±–µ—Ä–æ–≤',
        )

    def handle(self, *args, **options):
        if not TOKEN:
            self.stdout.write(
                self.style.ERROR('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
            )
            return

        if options['info']:
            info = get_bot_info()
            if info:
                self.stdout.write(
                    self.style.SUCCESS(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{info['result']['username']}")
                )
                self.stdout.write(f"–ò–º—è: {info['result']['first_name']}")
                self.stdout.write(f"ID: {info['result']['id']}")
            else:
                self.stdout.write(
                    self.style.ERROR('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ')
                )

        if options['test_chat']:
            chat = options['test_chat']
            self.stdout.write(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat}...")

            success = send_message_sync(
                chat,
                "ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç TARAK –±–æ—Ç–∞!\n\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
            )

            if success:
                self.stdout.write(
                    self.style.SUCCESS(f'–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat}!')
                )
            else:
                self.stdout.write(
                    self.style.ERROR(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat}')
                )
                self.stdout.write(
                    self.style.WARNING('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n'
                                       '1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º (/start)\n'
                                       '2. Username —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ (—Å @)\n'
                                       '3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π chat_id')
                )

        if options['list_barbers']:
            barbers = TelegramUser.objects.all()
            if barbers:
                self.stdout.write(
                    self.style.SUCCESS(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∞—Ä–±–µ—Ä—ã ({barbers.count()}):")
                )
                for barber in barbers:
                    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if barber.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                    self.stdout.write(
                        f"  @{barber.username} - {barber.barber.get_full_name()} ({status})"
                    )
            else:
                self.stdout.write(
                    self.style.WARNING('–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∞—Ä–±–µ—Ä–æ–≤')
                )

        if options['test_barbers']:
            barbers = TelegramUser.objects.filter(is_active=True)
            if not barbers:
                self.stdout.write(
                    self.style.WARNING('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ä–±–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
                )
                return

            self.stdout.write(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è {barbers.count()} –±–∞—Ä–±–µ—Ä–∞–º...")

            success_count = 0
            for barber in barbers:
                success = send_message_sync(
                    f"@{barber.username}",
                    f"üîî –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π TARAK\n\n"
                    f"–ü—Ä–∏–≤–µ—Ç, {barber.barber.get_full_name()}!\n"
                    f"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n\n"
                    f"–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ - –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! ‚úÖ"
                )

                if success:
                    success_count += 1
                    self.stdout.write(f"  ‚úÖ @{barber.username}")
                else:
                    self.stdout.write(f"  ‚ùå @{barber.username}")

            self.stdout.write(
                self.style.SUCCESS(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{barbers.count()}")
            )